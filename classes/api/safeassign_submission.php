<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Plain old PHP Object for SafeAssign submissions
 *
 * @package   plagiarism_safeassign
 * @copyright Copyright (c) 2019 Blackboard Inc. (http://www.blackboard.com)
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace plagiarism_safeassign\api;

defined('MOODLE_INTERNAL') || die();

/**
 * Class safeassign_submission
 * @package plagiarism_safeassign\api
 * @copyright Copyright (c) 2019 Blackboard Inc. (http://www.blackboard.com)
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class safeassign_submission {

    /**
     * When a submission is only file based.
     */
    const TYPE_SUBMISSION_FILE = 1;

    /**
     * When a submission is only text based.
     */
    const TYPE_SUBMISSION_ONLINETEXT = 2;

    /**
     * When a submission is file and text based.
     */
    const TYPE_SUBMISSION_FILE_AND_TEXT = 3;

    /**
     * If a submission has been submitted.
     */
    const STATUS_SUBMISSION_SUBMITTED = "submitted";

    /**
     * If a submission has not been yet submitted and is inside the draft area.
     */
    const STATUS_SUBMISSION_DRAFT = 'draft';

    /**
     * If a submission has exceded the max file size permitted for SafeAssign.
     */
    const STATUS_SUBMISSION_MAX_SIZE = 'maxsize';

    /**
     * If a submission has been sent by an instructor
     */
    const STATUS_SUBMISSION_IS_INSTRUCTOR = 'instructor';

    /**
     * If a submission has been deleted.
     */
    const STATUS_SUBMISSION_DELETED = 'deleted';

    /**
     * If a submission could not be deleted.
     */
    const STATUS_SUBMISSION_ERROR_DELETION = 'error_del';

    /**
     * If a submission have been restored.
     */
    const STATUS_SUBMISSION_RESTORED = 'restored';

    /**
     * @var boolean Flag to check if the submission is an update or is a new one.
     */
    private $update;

    /**
     * @var string UUID for the submission inside SafeAssign.
     */
    private $uuid;

    /**
     * @var boolean If the submission was sent to Global Reference Database.
     */
    private $globalcheck;

    /**
     * @var boolean If the submission is a group submission. (Process all files as one)
     */
    private $groupsubmission;

    /**
     * @var float High score for files sent to SafeAssign.
     */
    private $highscore;

    /**
     * @var float Average score for files sent to SafeAssign.
     */
    private $avgscore;

    /**
     * @var boolean If the submission have been sent to SafeAssign.
     */
    private $submitted;

    /**
     * @var boolean If the report for the submission have been generated by SafeAssign.
     */
    private $reportgenerated;

    /**
     * @var int The submission id insisde Moodle.
     */
    private $submissionid;

    /**
     * @var string Status of the submission, one of the constants declared above.
     */
    private $status;

    /**
     * @var int Type of the submission, one of the constants declared above.
     */
    private $type;

    /**
     * @var int Context module id for the submission.
     */
    private $cmid;

    /**
     * @var int Id for the user that sent the submission.
     */
    private $userid;

    /**
     * @var array Array that contains all fields that have been updated.
     */
    private $updates;

    public function __construct(
            $uuid = null,
            $globalcheck = 0,
            $groupsubmission = 1,
            $highscore = 0,
            $avgscore = 0,
            $submitted = 0,
            $reportgenerated = 0,
            $submissionid = 0,
            $status = self::STATUS_SUBMISSION_DRAFT,
            $type = 0,
            $cmid = 0,
            $userid = 0,
            $update = 0) {
        $this->uuid = $uuid;
        $this->globalcheck = $globalcheck;
        $this->groupsubmission = $groupsubmission;
        $this->highscore = $highscore;
        $this->avgscore = $avgscore;
        $this->submitted = $submitted;
        $this->reportgenerated = $reportgenerated;
        $this->submissionid = $submissionid;
        $this->status = $status;
        $this->type = $type;
        $this->cmid = $cmid;
        $this->userid = $userid;
        $this->update = $update;
        $this->updates = array();
    }

    public function __set($property, $value) {
        if (property_exists($this, $property) && $this->$property != $value) {
            $this->$property = $value;
            if (!in_array($property, $this->updates)) {
                array_push($this->updates, $property);
            }
        }
        return $this;
    }

    public function __get($name) {
        return property_exists($this, $name)
            ? $this->$name
            : null;
    }

    /**
     * Returns an standard class representation of this class
     * @return \stdClass
     */
    public function get_std_class() {
        $stdclass = new \stdClass();
        $stdclass->uuid = $this->uuid;
        $stdclass->globalcheck = $this->globalcheck;
        $stdclass->groupsubmission = $this->groupsubmission;
        $stdclass->highscore = $this->highscore;
        $stdclass->avgscore = $this->avgscore;
        $stdclass->submitted = $this->submitted;
        $stdclass->reportgenerated = $this->reportgenerated;
        $stdclass->submissionid = $this->submissionid;
        $stdclass->status = $this->status;
        $stdclass->type = $this->type;
        $stdclass->cmid = $this->cmid;
        $stdclass->userid = $this->userid;

        return $stdclass;
    }
}