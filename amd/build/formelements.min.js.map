{"version":3,"file":"formelements.min.js","sources":["../src/formelements.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @author    Guillermo Leon Alvarez Salamanca\n * @copyright Copyright (c) 2017 Open LMS (https://www.openlms.net)\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * JS code to disable temporarily the SafeAssign settings parameters in module edit from\n * until the page ends to load all the elements on it.\n */\ndefine(['jquery', 'core/str'], function($, str) {\n\n    return {\n\n        /**\n         * Hides via javascript the form elements until page is ready.\n         */\n        init: function() {\n\n            /**\n             * Create a div to display the loading message inside module edit form.\n             */\n            var createDiv = function() {\n                var div = $('<div></div>').attr('class', child.attr('class'));\n                div.attr('id', 'safeassign_loading_div');\n                parent.append(div);\n                getMessage();\n            };\n\n            /**\n             * Returns a string with the loading message.\n             */\n            var getMessage = function() {\n\n                // Get loading message via ajax.\n                var messageString = str.get_string('safeassign_loading_settings', 'plagiarism_safeassign');\n\n                $.when(messageString).done(function(s) {\n                    $('#safeassign_loading_div').append(s);\n                });\n\n            };\n\n            /**\n             * Checks if the element is disabled.\n             * @returns {boolean}\n             */\n            var isElementDisabled = function() {\n                return $('#id_safeassign_global_reference').prop('disabled');\n            };\n\n            /**\n             * Makes a JQuery promise to see if some element is disabled.\n             * @param {function} evaluateFunction\n             * @param {int} maxIterations\n             * @returns {promise} JQuery promise\n             */\n            var whenTrue = function(evaluateFunction, maxIterations) {\n                maxIterations = !maxIterations ? 10 : maxIterations;\n\n                var prom = $.Deferred();\n                var i = 0;\n                var checker = setInterval(function() {\n                    i = i + 1;\n                    if (i > maxIterations) {\n                        prom.reject();\n                        clearInterval(checker);\n                    } else {\n                        if (evaluateFunction()) {\n                            prom.resolve();\n                            clearInterval(checker);\n                        }\n                    }\n                }, 1000);\n\n                return prom.promise();\n            };\n\n            /**\n             * Print the settings checkboxes when tha page has been loaded.\n             */\n            var printSettings = function() {\n                var div = $('#safeassign_loading_div');\n                div.addClass('hidden-div');\n                child.removeAttr('style');\n                selectorCheckbox.prop('checked', checkboxInitialValue);\n                selectorCheckbox.prop('disabled', false);\n                if (checkboxInitialValue) {\n                    $('#id_safeassign_originality_report').prop('disabled', false);\n                    $('#id_safeassign_global_reference').prop('disabled', false);\n                }\n            };\n\n            var parent = $('#id_plagiarismdesc');\n\n            // Hide the settings for SafeAssign in the module edit form.\n            var child = parent.children('div').hide();\n\n            // Disable SafeAssign enable settings.\n            var selectorCheckbox = $('#id_safeassign_enabled');\n            var checkboxInitialValue = selectorCheckbox.prop('checked');\n            selectorCheckbox.prop('checked', false);\n            selectorCheckbox.prop('disabled', true);\n\n            createDiv();\n\n            var ready = whenTrue(isElementDisabled, 30);\n            ready.then(printSettings);\n\n        }\n    };\n});\n"],"names":["define","$","str","init","div","getMessage","messageString","get_string","when","done","s","append","parent","child","children","hide","selectorCheckbox","checkboxInitialValue","prop","attr","evaluateFunction","maxIterations","prom","Deferred","i","checker","setInterval","reject","clearInterval","resolve","promise","whenTrue","then","addClass","removeAttr"],"mappings":";;;;;;;;;;;;;;;;;;;;AAyBAA,4CAAO,CAAC,SAAU,aAAa,SAASC,EAAGC,WAEhC,CAKHC,KAAM,eAMMC,IASJC,WAAa,eAGTC,cAAgBJ,IAAIK,WAAW,8BAA+B,yBAElEN,EAAEO,KAAKF,eAAeG,MAAK,SAASC,GAChCT,EAAE,2BAA2BU,OAAOD,OAuDxCE,OAASX,EAAE,sBAGXY,MAAQD,OAAOE,SAAS,OAAOC,OAG/BC,iBAAmBf,EAAE,0BACrBgB,qBAAuBD,iBAAiBE,KAAK,WACjDF,iBAAiBE,KAAK,WAAW,GACjCF,iBAAiBE,KAAK,YAAY,IA/E1Bd,IAAMH,EAAE,eAAekB,KAAK,QAASN,MAAMM,KAAK,WAChDA,KAAK,KAAM,0BACfP,OAAOD,OAAOP,KACdC,aA+BW,SAASe,iBAAkBC,eACtCA,cAAiBA,eAAgB,OAE7BC,KAAOrB,EAAEsB,WACTC,EAAI,EACJC,QAAUC,aAAY,YACtBF,GAAQ,GACAH,eACJC,KAAKK,SACLC,cAAcH,UAEVL,qBACAE,KAAKO,UACLD,cAAcH,YAGvB,YAEIH,KAAKQ,UA+BJC,EA3DY,kBACb9B,EAAE,mCAAmCiB,KAAK,cA0Db,IAClCc,MA1Bc,WACN/B,EAAE,2BACRgC,SAAS,cACbpB,MAAMqB,WAAW,SACjBlB,iBAAiBE,KAAK,UAAWD,sBACjCD,iBAAiBE,KAAK,YAAY,GAC9BD,uBACAhB,EAAE,qCAAqCiB,KAAK,YAAY,GACxDjB,EAAE,mCAAmCiB,KAAK,YAAY"}